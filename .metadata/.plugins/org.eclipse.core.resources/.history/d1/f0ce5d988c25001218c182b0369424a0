package com.example.cameratest;

import java.io.IOException;

import com.example.cameratest.processors.FrameProcessor;

import android.content.*;
import android.graphics.Canvas;
import android.graphics.ImageFormat;
import android.graphics.PixelFormat;
import android.hardware.*;
import android.hardware.Camera.*;
import android.util.*;
import android.view.*;

@SuppressWarnings("unused")
public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {
	private static final String TAG = "CameraTest::CameraPreview";
    private SurfaceHolder mHolder;
    private Camera mCamera;
    private FrameProcessor mFrameProcessor;
    
    @SuppressWarnings("deprecation")
	public CameraPreview(Context context, Camera camera, FrameProcessor frameProcessor) {
        super(context);
        setWillNotDraw(false);
        mCamera = camera;
        mFrameProcessor = frameProcessor;

        // Install a SurfaceHolder.Callback so we get notified when the
        // underlying surface is created and destroyed.
        mHolder = getHolder();
        mHolder.addCallback(this);
        // deprecated setting, but required on Android versions prior to 3.0
        mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
    }
    
    @Override
    protected void onDraw(Canvas canvas) {
    	mFrameProcessor.onDraw(canvas);
    	super.onDraw(canvas);
    }

    public void surfaceCreated(SurfaceHolder holder) {
        // The Surface has been created, now tell the camera where to draw the preview.
        try {
            mCamera.setPreviewDisplay(holder);
            mCamera.startPreview();
        } catch (IOException e) {
            Log.d(TAG, "Error setting camera preview: " + e.getMessage());
        }
    }

    public void surfaceDestroyed(SurfaceHolder holder) {
        // empty. Take care of releasing the Camera preview in your activity.
    }

    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
        // If your preview can change or rotate, take care of those events here.
        // Make sure to stop the preview before resizing or reformatting it.

        if (mHolder.getSurface() == null){
          // preview surface does not exist
          return;
        }

        // stop preview before making changes
        try {
            mCamera.stopPreview();
        } catch (Exception e){
          // ignore: tried to stop a non-existent preview
        }

        // set preview size and make any resize, rotate or
        // reformatting changes here

        // start preview with new settings
        try {
            mCamera.setPreviewDisplay(mHolder);
            mCamera.startPreview();
            Size previewSize = mCamera.getParameters().getPreviewSize();
            int previewFormat = mCamera.getParameters().getPreviewFormat();
            int bytesPerPixel = ImageFormat.getBitsPerPixel(previewFormat) / 8;
            int bufferSize = (int)(previewSize.width * previewSize.height * bytesPerPixel * 1.5); //TODO: Don't know why I need this 1.5
            
            for (int i = 0; i < 1; i++) {
            	mCamera.addCallbackBuffer(new byte[bufferSize]);
            };
            
            mCamera.setPreviewCallbackWithBuffer(mFrameProcessor);

        } catch (Exception e){
            Log.d(TAG, "Error starting camera preview: " + e.getMessage());
        }
    }
}
